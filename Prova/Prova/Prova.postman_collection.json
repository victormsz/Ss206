{
	"info": {
		"_postman_id": "594778ea-bd06-489a-ba41-535e983931f7",
		"name": "Prova",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39462956"
	},
	"item": [
		{
			"name": "GetPostByUserId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Json contem o mesmo UserId do request\", function () {\r",
							"    var items = pm.response.json();\r",
							"\r",
							"    items.forEach(function(item) {\r",
							"        pm.expect(item.userId).to.equal(2, ` ${item.id} não pertence ao id fornecido`);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/?userId=2",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						""
					],
					"query": [
						{
							"key": "userId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PostPost",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Verifica se a resposta contém o ID da nova postagem\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property('id');\r",
							"});\r",
							"\r",
							"pm.test(\"Verifica se a resposta contém os dados enviados\", function () {\r",
							"    const requestBody = {\r",
							"        title: \"Kira yoshikage\",\r",
							"        body: \"Watashi no na wa “kirayoshikage” nenrei 33-sai jitaku wa moriōchō hokutō-bu no bessō chitai ni ari… kekkon wa shite inai… shigoto wa “kameyūchēn-ten” no kaishain de mainichi osokutomo yoru 8-ji made ni wa kitaku suru tabako wa suwanai sake wa tashinamu teido yoru 11 tokiniha yuka ni tsuki kanarazu 8-jikan wa suimin o toru yō ni shite iru… nerumae ni atatakai miruku o nomi 20-bu hodo no sutoretchi de karada o hogushite kara yuka ni tsuku to hotondo asamade jukusui-sa… akanbō no yō ni hirō ya sutoresu o nokosazu ni asa-me o samaseru nda… kenkōshinda demo ijō nashi to iwa reta yo\",\r",
							"        userId: 3333\r",
							"    };\r",
							"\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.title).to.eql(requestBody.title);\r",
							"    pm.expect(responseBody.body).contains(requestBody.body);\r",
							"    pm.expect(responseBody.userId).to.eql(requestBody.userId);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"userId\": 3333,\r\n        \"title\": \"Kira yoshikage\",\r\n        \"body\": \"Watashi no na wa “kirayoshikage” nenrei 33-sai jitaku wa moriōchō hokutō-bu no bessō chitai ni ari… kekkon wa shite inai… shigoto wa “kameyūchēn-ten” no kaishain de mainichi osokutomo yoru 8-ji made ni wa kitaku suru tabako wa suwanai sake wa tashinamu teido yoru 11 tokiniha yuka ni tsuki kanarazu 8-jikan wa suimin o toru yō ni shite iru… nerumae ni atatakai miruku o nomi 20-bu hodo no sutoretchi de karada o hogushite kara yuka ni tsuku to hotondo asamade jukusui-sa… akanbō no yō ni hirō ya sutoresu o nokosazu ni asa-me o samaseru nda… kenkōshinda demo ijō nashi to iwa reta yo\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostId",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: \"https://jsonplaceholder.typicode.com/posts/1\",\r",
							"    method: \"GET\"\r",
							"}, function (err, response) {\r",
							"    if (err) {\r",
							"        console.error(err);\r",
							"    } else {\r",
							"        const jsonResponse = response.json();\r",
							"\r",
							"        pm.variables.set(\"userId\", jsonResponse.userId);\r",
							"        pm.variables.set(\"id\", jsonResponse.id);\r",
							"        pm.variables.set(\"title\", jsonResponse.title);\r",
							"        pm.variables.set(\"body\", jsonResponse.body);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Updated the test script to fix TypeError\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verifica se o Titulo Mudou com o PATCH\", function () {\r",
							"    let preTitle = pm.variables.get(\"title\");\r",
							"    let responseData = pm.response.json();\r",
							"    let Title = responseData.title;\r",
							"    pm.expect(Title).to.not.eql(preTitle); // NAO pode ser igual, já que o titulo mudou\r",
							"\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Kira yoshikage\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verifica se o Corpo Mudou com o PATCH - Body\", function () {\r",
							"    let preBody = pm.variables.get(\"body\");\r",
							"    let responseData = pm.response.json();\r",
							"    let Body = responseData.body;\r",
							"\r",
							"    pm.expect(Body).to.eql(preBody);\r",
							"});\r",
							"\r",
							"pm.test(\"Verifica se o Corpo Mudou com o PATCH - UserId\", function () {\r",
							"    let preUserId = pm.variables.get(\"userId\");\r",
							"    let responseData = pm.response.json();\r",
							"    let UserId = responseData.userId;\r",
							"\r",
							"    pm.expect(UserId).to.eql(preUserId);\r",
							"});\r",
							"\r",
							"pm.test(\"Verifica se o Corpo Mudou com o PATCH - Id\", function () {\r",
							"    let preId = pm.variables.get(\"id\");\r",
							"    let responseData = pm.response.json();\r",
							"    let Id = responseData.id;\r",
							"\r",
							"    pm.expect(Id).to.eql(preId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"title\": \"Kira yoshikage\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostIdNaN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Updated test to handle JSON error and check if the post with id 123456 exists\r",
							"pm.test(\"Status code is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"title\": \"Kira yoshikage\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/123456",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"123456"
					]
				}
			},
			"response": []
		}
	]
}